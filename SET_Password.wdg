#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : SET_Password
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x124300c408ad3456
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes :
   -
     internal_properties : CAAAAAgAAACHRIaBFKzINiqszdk93mzxi2U5AXqX/rFWYRDPrHWZblXv8GqeRofyG0qzNJfyLrNY8SSG56/DLBgh9WkJmVdsnnaWhzQGotudBQnaBygI2P3nKSzxwMmEtXXAL719Cw0w8ztgCYDdXlc3A50F6gWLzaDthyxeJ33dAdQeiFFPvn4lbnZpkta3mxC8/4YpZMXj6u2u+c0rPbdck2jOjuQ=
     code : |1+
      constant
      	SALT = "JH3#GV(CFT"
      	NB_LOOPS = 512
      	CATEGORY_NONE = "<none>"
      	INFO_NOT_FILLED = "<not specified>"
      	
      	FIL_PARAM = "param.ini"
      	
      	PARAM_AUTOLOCKVAL = "AUTOLOCKVAL"		// Automatic lock on inactivity (in seconds)
      	PARAM_DEFAULT_USER = "DEFUSR"		// Default user name
      	PARAM_VIEW_PWD_EDIT = "VIEWPWD"		// Password visible in edit
      	PARAM_AUTH_MODE = "AUTHMODE"			// Authentication mode (MODE_AUTH_xxx constants below)
      	PARAM_PWD_ALWAYS = "PWDALWAYS"		// Type the main password at each minimization
      	PARAM_ERASEPP = "ERASEPP"				// Automatically erase the password from the clipboard
      	PARAM_BIOUNLOCK = "BIOUNLOCK"			// Enable unlock via biometric authentication
      	
      	ALIAS_BUF_MAIN_PASSWORD = "MASTER_PWD"	// Alias of the secure string containing the password derived from the main password
      	ALIAS_BUF_HFSQL_PASSWORD = "MASTER_DB"	// Alias of the secure string containing the password derived from the database password
      	
      	MODE_AUTH_UNDEFINED = ""
      	MODE_AUTH_PASS = "pwd_"
      	MODE_AUTH_PATTERN = "pattern"
      	
      	FIL_EXPORT = "passwords.xml"
      end
      
      STPassword is Structure
      	Label is string <mapping="StcPassword">
      	Username is string <mapping="UserName">
      	Password is string
      	Image is string
      	URL is string <mapping="URL">
      	Favorite is boolean  <mapping="Favorite">
      	CreationDate is datetime <mapping="CreationDate">
      	DateModification is datetime <mapping="ModificationDate">
      	LastAccessDate is datetime <mapping="AccessDate">
      	ExpirationDate is datetime <mapping="ExpirationDate">
      	Description is string <mapping="Description">
      	Category is string
      end
      
      STRect is Structure
      	x1,y1 are int
      	x2,y2 are int
      end
      
      gbDBIsAvailable is boolean = False
      gbufMainPassword is buffer
      gsHFSQLPassword is string
      
      InitParameter(paramIni,DirData()+FIL_PARAM)
     type : 720896
  procedures :
   -
     name : OpenDatabase
     procedure_id : 1315896358081541206
     type_code : 15
     code : |1+
      // Summary: Opens the HFSQL file of passwords
      // Syntax:
      //[ <Result> = ] OpenDatabase (<sMainPassword> is string, <bCalculatePassword> is boolean)
      //
      // Parameters:
      //	sMainPassword (UNICODE string): Main password
      //	bCalculatePassword (boolean): True if the main password is provided and must be derived. False if the main password is already initialized (biometric authentication)
      // Return value:
      // 	boolean: True if the database is available
      //
      //	sHFSQLFilePath (UNICODE string - default value=""): Path that will be used to locate the HFSQL file (if empty string, uses the default path)
      procedure public global OpenDatabase(sMainPassword is string, bCalculatePassword is boolean ) : boolean
      
      extern QRY_NonEmptyCategories
      extern QRY_PasswordList
      
      HCancelDeclaration(QRY_NonEmptyCategories)
      HCancelDeclaration(QRY_PasswordList)
      HClose("*")
      
      if bCalculatePassword then
      	// Main password for encrypting the password stored in database
      	gbufMainPassword = DeriveMainPassword(sMainPassword)
      
      	// Password of HFSQL file
      	gsHFSQLPassword = DeriveHFSQLPassword(sMainPassword)
      end
      
      // Open the HFSQL files
      nERR is int
      HChangeDir(Category,DirData())
      if HOpen(Category,gsHFSQLPassword)=False then
      	nERR = HError(hErrCurrent)
      	return False
      end
      
      HChangeDir(Password,DirData())
      if HOpen(Password,gsHFSQLPassword)=False then
      	nERR = HError(hErrCurrent)
      	return False
      end
      
      gbDBIsAvailable = True
      return True
      
     type : 458752
   -
     name : DeriveMainPassword
     procedure_id : 1315896358081606742
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] DeriveMainPassword (<sMainPassword> is string)
      //
      // Parameters:
      //	sMainPassword (UNICODE string): <specify the role of sMainPassword>
      // Return value:
      // 	Undefined type: // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure DeriveMainPassword( sMainPassword is string )
      
      // If the string is empty, don't call HashString
      if sMainPassword="" then
      	return ""
      end
      
      buf0 is buffer = StringToUTF8(sMainPassword)
      bufPWD is buffer = StringToUTF8(sMainPassword)
      
      n is int = 1
      loop(NB_LOOPS)
      	bufPWD = HashString(HA_HMAC_MD5_128,bufPWD,buf0[[n]])
      	n++
      	if n>Length(buf0) then
      		n = 1
      	end
      end
      
      dbgAssert(Length(bufPWD)=16)
      
      return bufPWD
      
     type : 458752
   -
     name : DeriveHFSQLPassword
     procedure_id : 1315896358081672278
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] DeriveHFSQLPassword (<sMainPassword> is string)
      //
      // Parameters:
      //	sMainPassword (UNICODE string): <specify the role of sMainPassword>
      // Return value:
      // 	variant: // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure DeriveHFSQLPassword( sMainPassword is string )
      
      // result sMainPassword
      
      buf0 is buffer = StringToUTF8(StringReverse(sMainPassword))
      bufPWD is buffer = StringToUTF8(sMainPassword)
      bufPWD = HashString(HA_SHA_256,bufPWD,buf0)
      
      return Encrypt(bufPWD,"",cryptNone)
     type : 458752
   -
     name : ChangeMainPassword
     procedure_id : 1315896358081737814
     type_code : 15
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] ChangeMainPassword (<sNewPwdInClear> is string)
      //
      // Parameters:
      //	sNewPwdInClear (UNICODE string): <specify the role of sNew>
      // Return value:
      // 	boolean: // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure ChangeMainPassword( sNewPwdInClear is string )
      
      extern QRY_NonEmptyCategories
      extern QRY_PasswordList
      
      // Encrypts the passwords again
      for each Password 
      	bufLight is buffer = DecryptBuffer(Password.Password)
      	Password.Password = digit(bufLight,sNewPwdInClear)
      	HModify(Password)
      end
      
      sDir is string = CompleteDir(fDataDir())
      
      // Creates the new files
      _HChangePassword(Category,sNewPwdInClear)
      _HChangePassword(Password,sNewPwdInClear)
      
      // Closes the former files
      HClose("*")
      // Closes the queries
      HCancelDeclaration(QRY_NonEmptyCategories)
      HCancelDeclaration(QRY_PasswordList)
      
      // Deletes the former files
      _DeleteFormerDatabase(sDir,Category)
      _DeleteFormerDatabase(sDir,Password)
      
      // Renames the new files
      _RenameFile(sDir,Category)
      _RenameFile(sDir,Password)
      
      // Re-opens the new database
      OpenDatabase(sNewPwdInClear,True)
      
      
      
      return True
     type : 458752
   -
     name : DecryptBuffer
     procedure_id : 1315896358081803350
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntaxe :
      //[ <Résultat> = ] DecryptBuffer (<buf> est buffer)
      //
      // Paramètres :
      //	buf (buffer) : <specify the role of buf>
      // Example:
      // Indicate an example.
      //
      // Return value:
      // 	buffer: // 	None
      procedure DecryptBuffer( local buf is buffer )
      
      b is buffer = DecryptStandard(buf,gbufMainPassword,cryptAES128,cryptCBC,cryptPaddingPKCS)
      
      return b
      
     type : 458752
   -
     name : Digit
     internal_properties : CAAAAAgAAADNN/bcA40msr+z57aBdbM1r8Tq/jm6wnEi3NYlpeJyGmWTbybV1ssylcsyAvBsYar4DmqqCdGlaxjOXSe5r4E8CdroSkxIY3RHm0CUSyThJRsqy/COVUNBmC7cRclQcXXO71KVsAVct9o2Md1VjQHJX0/HtWXM/tVZNwMAjmidaemmaqyHAVxCFxwgoUz81yVwsvkl2iOsEvCuL0RWHVonLFym7recBhjYRZnQOcWbLsUSPg==
     procedure_id : 1315896358081868886
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] Encrypt (<bufMessage> is buffer [, <sMainNew> is string])
      //
      // Parameters:
      //	bufMessage (buffer): <specify the role of sClear>
      //	sMainNew (UNICODE string - default value=""): <specify the role of sMainNew>
      // Return value:
      // 	buffer: // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure digit( local bufMessage is buffer , local sNewMain is string = "" )
      
      
      bufSecret is buffer = gbufMainPassword
      if sNewMain<>"" then
      	bufSecret = DeriveMainPassword(sNewMain)
      end
      
      bufEncrypt is buffer = EncryptStandard(bufMessage,bufSecret,cryptAES128,cryptCBC,cryptPaddingPKCS)
      
      dbgAssert(bufMessage=DecryptStandard(bufEncrypt,bufSecret,cryptAES128,cryptCBC,cryptPaddingPKCS))
      
      return bufEncrypt
     type : 458752
   -
     name : CreateDatabase
     procedure_id : 1315896358081934422
     type_code : 15
     code : |1+
      // Summary: Opens the HFSQL file of passwords
      // Syntax:
      //[ <Result> = ] CreateDatabase (<sMainPassword> is string)
      //
      // Parameters:
      //	sMainPassword (UNICODE string): Main password
      // Return value:
      // 	boolean: True if the file is opened or created, False otherwise
      //
      //	sHFSQLFilePath (UNICODE string - default value=""): Path that will be used to locate the HFSQL file (if empty string, uses the default path)
      procedure public global CreateDatabase(sMainPassword is string ) : boolean
      
      // Main password for encrypting the password stored in database
      gbufMainPassword = DeriveMainPassword(sMainPassword)
      
      // Password of HFSQL file
      gsHFSQLPassword = DeriveHFSQLPassword(sMainPassword)
      
      // Open the HFSQL file
      
      HChangeDir(Password,DirData())
      if HCreation(Password,gsHFSQLPassword)=False then
      	return False
      end
      HChangeDir(Category,DirData())
      if HCreation(Category,gsHFSQLPassword)=False then
      	return False
      end
      
      // Initialize the default categories
      Category.CategoryName = "News"
      HAdd(Category)
      Category.CategoryName = "Administration"
      HAdd(Category)
      Category.CategoryName = "Other"
      HAdd(Category)
      Category.CategoryName = "Bank"
      HAdd(Category)
      Category.CategoryName = "Entertainment"
      HAdd(Category)
      Category.CategoryName = "Email"
      HAdd(Category)
      Category.CategoryName = "Games"
      HAdd(Category)
      Category.CategoryName = "Social networks"
      HAdd(Category)
      Category.CategoryName = "Shopping"
      HAdd(Category)
      Category.CategoryName = "Sports"
      HAdd(Category)
      Category.CategoryName = "Technology"
      HAdd(Category)
      Category.CategoryName = "Work"
      HAdd(Category)
      Category.CategoryName = "Travel"
      HAdd(Category)
      
      
      gbDBIsAvailable = True
      return True
     type : 458752
   -
     name : bDatabaseIsAvailable
     procedure_id : 1315896358081999958
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] bDatabaseIsAvailable ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	boolean: // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure bDatabaseIsAvailable()
      
      return gbDBIsAvailable
     type : 458752
   -
     name : _HChangePassword
     internal_properties : CAAAAAgAAACuVq2OKd6mNBQDgKiWkE2BkXwyvF7pEt/qu+oJxNjhbVkNYzBdvhleqwO5w7tN2YmOkTZ/kOWd/cjMF0ggWZQfXOrR1/Ee9L8HVwDjNovy8PQo68rYfFulsGA3PY+2JtrFU69cy89TNTr0ru81KZVD6++yjnquqUNnNz2Hr5eIHY10xV3Ui3U27W4dYcK6hTWDvjSfeNot
     procedure_id : 1315896358082065494
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] _HChangPassword (<FileName>, <sNewPwdInClear>)
      //
      // Parameters:
      //	FileName: <specify the role of Category>
      //	sNewPwdInClear: <specify the role of sNewHFSQL>
      // Return value:
      // 	boolean: // 	None
      //
      // Example:
      // Indicate an example.
      //// Automatic process of errors:   run the block of code CASE ERROR
      //
      
      procedure _HChangePassword(filename,sNewPwdInClear)
      
      sDir is string = DirData()
      
      // Password of HFSQL file
      sNewHFSQL is string = DeriveHFSQLPassword(sNewPwdInClear)
      
      // Creates the new file
      sAlias is string = Lower(GetGUID(guidRough))
      HAlias(filename,sAlias)
      HChangeName(sAlias,filename..PhysicalName+"_temp")
      HChangeDir(sAlias,sDir)
      HCreation(sAlias,sNewHFSQL)
      for each filename
      	HCopyRecord(sAlias,filename,hCopyAutoId)
      	HAdd(sAlias,hSetIdAuto)
      end
      HClose(sAlias)
      
      return True
      
      case Error:
      	return False
     type : 458752
   -
     name : DirData
     procedure_id : 1315896358082131030
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] DataDir ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	variant: // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure DirData()
      
      return CompleteDir(fDataDir())
     type : 458752
   -
     name : _DeleteFormerDatabase
     internal_properties : CAAAAAgAAAAdrIinQUC8/PWN+JCy9UANeJkzsJNoaDoyUvdjiuEeYF5Zw6rn31+uzRP+shJy3+BEcoi2HVVAW6OXjKlN+41bdlmo1ed467ErodfMtQaBw1wxYxQbSNBCOx7bXLE2d906xv6cXlnMuFW8sFhB//tVv1o3PJPC3LLMpZLd/uARWQ2zeI+XaShTqrylji76xY5yzKKaBiwNILCUZUV0q0P8PIkspzIm5CpXr8J5CbuApTaAtk76
     procedure_id : 1315896358082196566
     type_code : 15
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      // _DeleteFormerDatabase (<sDir>, <FileName>)
      //
      // Parameters:
      // 	sDir: <specify the role of sDir>
      //	FileName: <specify the role of FileName>
      // Return value:
      // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure _DeleteFormerDatabase(sDir,filename)
      
      fDelete(sDir+filename..PhysicalName+".fic")
      if fFileExist(sDir+filename..PhysicalName+".ndx") then fDelete(sDir+filename..PhysicalName+".ndx")
      if fFileExist(sDir+filename..PhysicalName+".mmo") then fDelete(sDir+filename..PhysicalName+".mmo")
     type : 458752
   -
     name : _RenameFile
     internal_properties : CAAAAAgAAAA1lODvCZjktD1FQFhKvYjFQJHiuGXiZJAsPucptClqFKTRLY49FY/02/vOvMAmuwSuFprS7wM47TW7NK9fQ/H/yP3K8dUylwtp4ZOOY+7Nt5KBTYiZdpCgRQrWQ6ID6NIBA1PDh1JTy7ivr9vGeADeNtf0v0gXJxGncHEwa/HOqvysqRbo8i9i7Q8godNbUpcN3XP9c3lg74Pn/GBJHJDdb7o0rzrenGKfZwoxwfPIbX5IjmbS
     procedure_id : 1315896358082262102
     type_code : 15
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      // _RenameFile (<sDir>, <FileName>)
      //
      // Parameters:
      // 	sDir: <specify the role of sDir>
      //	FileName: <specify the role of FileName>
      // Return value:
      // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure _RenameFile(sDir,filename)
      
      fRename(sDir+filename..PhysicalName+"_temp.fic",sDir+filename..PhysicalName+".fic")
      if fFileExist(sDir+filename..PhysicalName+"_temp.ndx") then fRename(sDir+filename..PhysicalName+"_temp.ndx",sDir+filename..PhysicalName+".ndx")
      if fFileExist(sDir+filename..PhysicalName+"_temp.mmo") then fRename(sDir+filename..PhysicalName+"_temp.mmo",sDir+filename..PhysicalName+".mmo")
     type : 458752
   -
     name : AuthenticationModeMain
     procedure_id : 1315896358082327638
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] MainAuthenticationMode ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	variant: // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure AuthenticationModeMain()
      
      return LoadParameter(PARAM_AUTH_MODE)
     type : 458752
   -
     name : ExportDatabase
     procedure_id : 1315896358082393174
     type_code : 15
     code : |1+
      procedure ExportDatabase()
      
      bufExport is buffer
      stExport is STPassword
      arrExport is array of STPassword
      sExportFile is string = sExportPath()
      
      for each Password 
      	// Reads the record content
      	stExport.Label = Password.StcPassword
      	stExport.Username = Password.UserName
      	stExport.URL = Password.URL
      	stExport.Favorite = Password.Favorite
      	stExport.CreationDate = Password.CreationDate
      	stExport.DateModification = Password.ModificationDate
      	stExport.LastAccessDate = Password.AccessDate
      	stExport.ExpirationDate = Password.ExpirationDate
      	stExport.Description = Password.Description
      
      	// Transforms the category ID into string	
      	if HReadSeekFirst(Category,CategoryID,Password.CategoryID) then
      		stExport.Category = Category.CategoryName
      	else
      		stExport.Category = ""
      	end
      	// Decrypts the password
      	stExport.Password = DecryptBuffer(Password.Password)
      	// Encodes the image in base 64
      	stExport.Image = Encrypt(Password.Picto,"",cryptNone)
      	Add(arrExport,stExport)
      end
      
      Serialize(arrExport,bufExport,psdXML)	
      if fSaveBuffer(sExportFile,bufExport)=False then
      	ToastDisplay(ErrorInfo(errMessage))
      else
      <compile if TypeConfiguration=Android>
      	ToastDisplay("§§Export completed. The  file has been saved to the memory card of the device.§§VS3503780558§§")		
      <end>
      <compile if TypeConfiguration=iOS>
      	ToastDisplay("§§Export completed. You can retrieve the  file via iTunes share.§§VS3820056036§§")		
      <end>
      end
      
      <compile if TypeConfiguration=Android or TypeConfiguration=iOS>
      	
      	Email.Subject = "Password database export"
      	Email.Message = "Saving password database. Caution: Passwords are readable in the attached file!"
      	Email.Attach[1] = sExportFile
      	Email.NbAttach = 1
      	EmailRunApp()	
      
      <end>
      
     type : 458752
   -
     name : sExportPath
     procedure_id : 1315896358082458710
     type_code : 15
     code : |1+
      procedure sExportPath()
      
      if InSimulatorMode() then
      	return CompleteDir(fExeDir())+FIL_EXPORT
      end
      
      
      <if CibleExécution=Android>
      	                   
      	return CompleteDir(SysDirStorageCard())+FIL_EXPORT
      	
      <else>
      	
      	return CompleteDir(fDataDir())+FIL_EXPORT
      	
      <end>
      
      
      
      
     type : 458752
   -
     name : CategoryName
     procedure_id : 1315896358082524246
     type_code : 15
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] CategoryName (<nCategoryID> is 8-byte int)
      //
      // Parameters:
      //	nCategoryID (8-byte integer): <specify the role of nCategoryID>
      // Return value:
      // 	Undefined type: // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure CategoryName(nCategoryID is 8-byte int)
      
      if nCategoryID=0 _or_ HReadSeekFirst(Category,CategoryID,nCategoryID)=False then
      	return "<none>"
      end
      
      return Category.CategoryName
     type : 458752
   -
     name : HasExpired
     internal_properties : CAAAAAgAAAAUbxCjftp/mcgox7nmJKtOkSYWyn4xtdbSNNxBOYLiwwyBK3L5PEAhUgpGZRYSZVqwwLwlrsLZM2yYid6EkITZA3waCgS2wzqq0s6SHBV+La4DaWUtdgOQbEHsLuPsdtcT4nGDpDnF/jCLmSLrKyZL9ELIuUfIy3BrKPdLIAColeUPtxVmsfBNO5CSggdrPnMB0zk07+Q=
     procedure_id : 1315896358082589782
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] HasExpired (<dtExpirationDate>)
      //
      // Parameters:
      //	dtExpirationDate: <specify the role of dtExpirationDate>
      // Return value:
      // 	boolean: // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure HasExpired(dtExpirationDate)
      
      // If datetime is not specified, the password does not expire
      if DateTimeValid(dtExpirationDate)=False then 
      	return False
      end
      
      return (dtExpirationDate<SysDateTime())
     type : 458752
   -
     name : OptimizeDatabase
     procedure_id : 1315896358082655318
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      // OptimizeDatabase ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure OptimizeDatabase()
      
      HIndex(Category,hNdxCompact)
      HIndex(Password,hNdxCompact)
      
      ToastDisplay("Optimization completed.")
     type : 458752
   -
     name : CheckMainPassword
     procedure_id : 1315896358082720854
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] CheckMainPassword (<sPasswordToCheck> is string)
      //
      // Parameters:
      //	sPasswordToCheck (UNICODE string): <specify the role of sPasswordToCheck>
      // Return value:
      // 	boolean: // 	None
      //
      // Example:
      // Indicate an example.
      //
      procedure CheckMainPassword( sPasswordToCheck is string )
      
      return gbufMainPassword=DeriveMainPassword(sPasswordToCheck)
      
     type : 458752
   -
     name : ImportDatabase
     internal_properties : CAAAAAgAAACqChOvpdGUKSAjDoDVXFEOdWAHqQS3gYVS4mDEJ6GOQ2TsPDh9EIC4qP6ZGophG+1eP91cPTtt7PU4ChFMEjJI69+47UQJpd3oN6kRzzufmyRvdApKPe59NVpl5SLDF3YE0+RwsTQcx8+iEKfWTF9CKW97JuwRyN+aXx44P8tFMG+hwVMsTVIv17SmoocPMlHh8wZPvmZQ9usC2JL9rMKXGTDovFRN
     procedure_id : 1315896358082786390
     type_code : 15
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      //ImportDatabase ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	None
      //
      // Example:
      // Indicate an example.
      //
      //	sXMLFile (UNICODE string) : <specify the role of sXMLFile here>
      procedure ImportDatabase()
      
      <if CibleExécution=iOS or CibleExécution=Android>
      URISelect(OnDatabaseImport,"text/xml")
      
      	INTERNAL PROCEDURE OnDatabaseImport(bSuccess is boolean, uriResult is URI)
      	if bSuccess then
      		URIToBuffer(uriResult,OnDatabaseLoad,"text/xml")		
      	else
      		ToastDisplay("Import canceled.")
      	end
      	end 
      <end>
      
      <if CibleExécution=ApplicationWindows>
      	sFile is string = fSelect("","","Select the file to import","XML Files (*.xml)"+TAB+"*.xml",".xml",fselOpen+fselExist)
      	if sFile<>"" then
      		bufBuf is buffer = fLoadBuffer(sFile)
      		OnDatabaseLoad(True,bufBuf,"")
      	end
      <end>
      
      
      	INTERNAL PROCEDURE OnDatabaseLoad(bSuccess is boolean, bufDatabase buffer, sType is string<useful>)
      	
      	if bSuccess=False then
      		ToastDisplay("An error occurred while reading the file to be imported.")
      		return
      	end
      	
      	arrImport is array of STPassword
      	
      	// The XML file is deserialized directly in the import array
      	when exception in 
      		Deserialize(arrImport,bufDatabase,psdXML)
      		
      	do
      		ToastDisplay("File format not recognized")
      		return
      	end
      	
      	nNbImport		is int
      	stAPassword	is STPassword
      	FOR EACH ELEMENT stAPassword of arrImport
      		// No duplicate management
      		Password.StcPassword	= stAPassword.Label
      		Password.UserName	= stAPassword.Username
      		Password.URL				= stAPassword.URL
      		Password.Favorite			= stAPassword.Favorite
      		Password.CreationDate		= stAPassword.CreationDate
      		Password.ModificationDate	= stAPassword.DateModification
      		Password.AccessDate		= stAPassword.LastAccessDate
      		Password.ExpirationDate	= stAPassword.ExpirationDate
      		Password.Description		= stAPassword.Description
      		Password.Password		= digit(stAPassword.Password)
      		
      		// If a category is specified
      		if stAPassword.Category <> "" then
      			HReadSeekFirst(Category,CategoryName,stAPassword.Category) 
      			if HFound(Category) = False then
      				// Add it
      				Category.CategoryName = stAPassword.Category
      				// Adds the category
      				if HAdd(Category) = False then
      					// Unable to add the category
      					HReset(Category)
      				end
      			end
      		else
      			// There is no category
      			// The buffer of the category file is reset, so the identifier will be equal to 0
      			HReset(Category)		
      		end
      		
      		Password.CategoryID = Category.CategoryID
      		if HAdd(Password) then
      			nNbImport++
      		end
      	end
      	
      	switch nNbImport
      		case 0
      			ToastDisplay("No password has been imported.")
      		case 1
      			ToastDisplay("One password has been imported.")
      		other case
      			ToastDisplay("[%nNbImport%] passwords have been imported.")
      	end
      	
      	end
     type : 458752
   -
     name : SearchCategoryByID
     procedure_id : 1315896358082851926
     type_code : 15
     code : |1-
      procedure SearchCategoryByID( nCategoryID ) <business logic>
      
      return HReadSeekFirst(Category,CategoryID,nCategoryID)
     type : 458752
   -
     name : SearchCategoryByName
     procedure_id : 1315896358082917462
     type_code : 15
     code : |1-
      procedure SearchCategoryByName( sName ) <business logic>
      
      return HReadSeekFirst(Category,CategoryName,sName)
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : COL_MotDePasse
resources :
 string_res :
  identifier : 0x15801fc600480525
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
  strings :
   -
     text :
      en-GB : File format not recognized
     index : 0
   -
     text :
      en-GB : " passwords have been imported.\"\r\n"
     index : 1
   -
     text :
      en-GB : " passwords have been imported.\"\r\n"
     index : 2
   -
     text :
      en-GB : "[%nNbImport%] passwords have been imported."
     index : 3
   -
     text :
      en-GB : "Warning: some errors occurred during import. Some passwords could not be added to the database."
     index : 4
   -
     text :
      en-GB : File format not recognized
     index : 5
   -
     text :
      en-GB : " passwords have been imported.\"\r\n"
     index : 6
   -
     text :
      en-GB : " passwords have been imported.\"\r\n"
     index : 7
   -
     text :
      en-GB : File format not recognized
     index : 8
   -
     text :
      en-GB : " passwords have been imported.\"\r\n"
     index : 9
   -
     text :
      en-GB : " passwords have been imported.\"\r\n"
     index : 10
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
